#!/usr/bin/env python3

import sys
import argparse
import base64

def encode_ascii85(data, incremental):
    if incremental:
        result = []
        for i in range(0, len(data), 4):
            chunk = data[i:i+4]
            result.append(base64.a85encode(chunk).decode('ascii'))
        return result
    else:
        return [base64.a85encode(data).decode('ascii')]

def decode_ascii85(data, incremental):
    if incremental:
        buffer = ""
        result = []
        for line in data:
            buffer += line
            try:
                decoded = base64.a85decode(buffer, adobe=False)
                result.append(decoded)
                buffer = ""
            except ValueError:
                continue
        return result
    else:
        try:
            return [base64.a85decode(data, adobe=False)]
        except ValueError as e:
            sys.stderr.write(f"Ошибка декодирования: {e}\n")
            sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description="ASCII85 encoder/decoder")
    parser.add_argument("-e", "--encode", action="store_true", help="Кодировать в ASCII85")
    parser.add_argument("-d", "--decode", action="store_true", help="Декодировать из ASCII85")
    parser.add_argument("-i", "--incremental", action="store_true", help="Обрабатывать данные постепенно")
    args = parser.parse_args()

    if not args.encode and not args.decode:
        args.encode = True

    if args.incremental:
        input_data = sys.stdin
    else:
        input_data = sys.stdin.read()

    if args.encode:
        if args.incremental:
            encoded_chunks = encode_ascii85(input_data.read().encode('utf-8'), incremental=True)
            for chunk in encoded_chunks:
                sys.stdout.write(chunk + '\n')
        else:
            encoded_data = ''.join(encode_ascii85(input_data.encode('utf-8'), incremental=False))
            sys.stdout.write(encoded_data + '\n')
    elif args.decode:
        if args.incremental:
            decoded_chunks = decode_ascii85(input_data, incremental=True)
            for chunk in decoded_chunks:
                sys.stdout.buffer.write(chunk)
        else:
            decoded_data = b''.join(decode_ascii85(input_data, incremental=False))
            sys.stdout.buffer.write(decoded_data)

if __name__ == "__main__":
    main()

